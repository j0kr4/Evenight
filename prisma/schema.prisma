datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  adressId      String
  passwordHash  String?
  passwordSalt  String?
  image         String?
  age           Int?
  interests     String[]
  rating        Float            @default(0.0)
  parties       Party[]          @relation("UserParties")
  organizedParties Party[]       @relation("OrganizedParties")
  accounts      Account[]
  sessions      Session[]
  role          String           @default("USER")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  fromComments Comment[] @relation("CommentUserFrom")
  toComments   Comment[] @relation("CommentUserTo")
  adress        Adress @relation(fields: [adressId], references: [id])
  @@index([email])
  @@index([createdAt])
}

enum PartyType {
  LAN
  PARTY
  BOARD_GAME
}

model Party {
  id              String      @id @default(cuid())
  name            String
  type            PartyType
  date            DateTime   
  time            DateTime
  adressId        String
  description     String
  availableSeats  Int
  isPaid          Boolean
  place           Int
  price           Float?
  boardGames      BoardGame[]
  videoGames      VideoGame[]
  organizerId     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  organizer       User        @relation(fields: [organizerId], references: [id], name: "OrganizedParties")
  participants    User[]      @relation("UserParties")
  adress        Adress @relation(fields: [adressId], references: [id])
  comments        Comment[]
  bringSnacks     Boolean     @default(false)
  bringDrinks     Boolean     @default(false)
  bringDrinksAlcool     Boolean     @default(false)


  @@index([type])
  @@index([date])
  @@index([createdAt])
}
model BoardGame {
  id        String   @id @default(cuid())
  name      String
  partyId   String
  party     Party    @relation(fields: [partyId], references: [id])
}

model VideoGame {
  id        String   @id @default(cuid())
  name      String
  platform  String
  partyId   String
  party     Party    @relation(fields: [partyId], references: [id])
}

model Adress {
  id        String   @id @default(cuid())
  street    String
  city      String
  region    String
  country   String
  zipCode   String

  party     Party[]
  user      User[]
  @@index([city])
  @@index([region])
  @@index([country])
  @@index([zipCode])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  rating    Float
  fromUserId  String
  toUserId    String
  partyId   String
  createdAt DateTime  @default(now())
  userFrom    User      @relation(name: "CommentUserFrom", fields: [fromUserId], references: [id])
  userTo      User      @relation(name: "CommentUserTo", fields: [toUserId], references: [id])
  party     Party     @relation(fields: [partyId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([partyId])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
  @@index([expires])
}